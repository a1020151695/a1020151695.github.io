<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo踩坑</title>
    <url>/2020/11/05/Hexo%E8%B8%A9%E5%9D%91/</url>
    <content><![CDATA[<p>1.ssh密匙</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;邮件地址&quot;</span></span><br></pre></td></tr></table></figure>

<p>找到<code>.ssh\id_rsa.pub</code>文件，记事本打开并复制里面的内容，打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key：</p>
<p>将刚复制的内容粘贴到key那里，title随便填，保存。</p>
<p>Win10下的~目录就是对应User下</p>
<p>然后，id_rsa.pub这个文件不能直接打开，需要命令行指令</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">more id_rsa.pub</span><br></pre></td></tr></table></figure>

<p>2.常用指令</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">hexo new &quot;postName&quot; #新建文章</span><br><span class="line">hexo generate #生成静态页面至public目录</span><br><span class="line">hexo server #开启预览访问端口（默认端口4000，&#x27;ctrl + c&#x27;关闭server）</span><br><span class="line">hexo deploy #部署到GitHub</span><br><span class="line">hexo version  #查看Hexo的版本</span><br></pre></td></tr></table></figure>

<p>部署步骤：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>

<p>3.每篇文章的配置</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: Spring注解是怎么工作的</span><br><span class="line">date: 2020-11-05 17:05:39</span><br><span class="line">tags:</span><br><span class="line">- Spring</span><br><span class="line">- Java</span><br><span class="line">categories:</span><br><span class="line">- [Java,Spring]</span><br></pre></td></tr></table></figure>

<p>4.配置文件的修改</p>
<p>_config.yml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: 藏经阁</span><br><span class="line">subtitle: &#39;&#39;</span><br><span class="line">description: &#39;太多东西要学啦&#39;</span><br><span class="line">keywords: Java</span><br><span class="line">author: FreeJim</span><br><span class="line">language: zh</span><br><span class="line">timezone: &#39;Asia&#x2F;Hong_Kong&#39;</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https:&#x2F;&#x2F;github.com&#x2F;a1020151695&#x2F;a1020151695.github.io</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure>

<p>具体可查<a href="https://hexo.io/docs/configuration">官方文档</a></p>
<p>5.自定义域名</p>
<p>Setting中设置自定义域名，然后Save保存</p>
<p>阿里云域名管理，要添加两个纪录</p>
<p>一个是CNAME www 把    把当前域名和xxx.github.io联系起来</p>
<p>其实是把xxx.github.io指向你自己的域名</p>
<p>第二个是@ 你自己的域名指向一个IP（即xxx.github.io的实际IP）</p>
<p>这里我踩了坑！</p>
<p>你不能在你自己电脑上Ping！！！！</p>
<p>拿你的云服务器去ping才有用</p>
<p>或者不需要服务器，直接网上找一个域名解析的网站，去查</p>
<p>例如<a href="https://site.ip138.com/">这个</a></p>
<p>gtihub上看得见的文件都是在“source”文件夹里面的—CNAME–域名配置文件</p>
<p>然后 如果要向google提交验证的话，我们用meta的方式</p>
<p>如果用html的方式的话，hexo部署的时候会修改html文件里的内容</p>
<p>导致google无法验证</p>
<p>然后你也不能直接放到github中</p>
<p>因为github仓库不完全等于hexo部署的服务器</p>
<p>所以我们选择meta</p>
<p>然后hexo是通过各主题模板来修改、生成各网页的</p>
<p>和meta相关的head的模板在这</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">themes\landscape\layout\_partial\head.ejs</span><br></pre></td></tr></table></figure>

<p>把google 给的meta 加进去就好了</p>
<p>添加后可以在这里查看网站数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;search.google.com&#x2F;search-console&#x2F;about</span><br></pre></td></tr></table></figure>

<p>查看是否验证成功</p>
<p>几天后，google搜索：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">site:“你的网站”</span><br></pre></td></tr></table></figure>

<p>之后我看了百度的验证</p>
<p>不行！</p>
<p>github把百度屏蔽掉了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">不到一分钟前freejim.icu使用HTML标签验证</span><br><span class="line">原因：服务器连接超时，请检查服务器设置或者稍后重试。</span><br><span class="line">问题分析&amp;解决办法： 连接网站时超时，可能是网络速度过慢，请检查服务器网络线路，或者稍后再试。</span><br></pre></td></tr></table></figure>

<p>不允许百度去爬</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">对此github官方是这样说的 : 由于百度爬虫爬得太猛烈，已经对很多Github用户造成了可用性的问题了，而禁用百度爬虫这一举措可能会一直持续下去。</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Config</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Config</tag>
      </tags>
  </entry>
  <entry>
    <title>Chinese Chess Conclusion</title>
    <url>/2021/01/02/Chinese-Chess-Conclusion/</url>
    <content><![CDATA[<p>1.Alpha-Beta Search</p>
<p>Main idea: </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">We use this algorithm to help computor against with people</span><br><span class="line">The algorithm will simulate all leagal move for both</span><br><span class="line">And every move will change the score, which represent the chance computor will win</span><br><span class="line">The search is deep-search, and the depth at least 2</span><br><span class="line">Which means the algorithm should at least evaluate the score twice</span><br><span class="line">When computor simulate and finds that after a computor&#39;s leagal move(call it move &quot;A&quot;)</span><br><span class="line">People can eat computor&#39;s piece and let computor&#39;s score reduce</span><br><span class="line">then we stop searching move &quot;A&quot;, because move &quot;A&quot; will make computor be in dangerous</span><br><span class="line">so this is the key to avoid computor&#39;s King be killed !!</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>2.Object Oriented is a very idea</p>
]]></content>
      <categories>
        <category>Project Conclusion</category>
      </categories>
      <tags>
        <tag>Project Conclusion</tag>
      </tags>
  </entry>
  <entry>
    <title>Python File Operation</title>
    <url>/2021/01/02/Python-File-Operation/</url>
    <content><![CDATA[<p>Add content to file</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">file = <span class="built_in">open</span>(<span class="string">&#x27;xxx.txt&#x27;</span>,<span class="string">&#x27;a&#x27;</span>) <span class="comment"># &#x27;a&#x27; mean append</span></span><br></pre></td></tr></table></figure>

<p>Read content</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">text = file.read() <span class="comment"># read the whole file</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Python</category>
        <category>Tutorial</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask Cors</title>
    <url>/2021/01/02/Flask-Cors/</url>
    <content><![CDATA[<p>Cors solution</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from flask_cors import *</span><br><span class="line">CORS(app, supports_credentials&#x3D;True)</span><br></pre></td></tr></table></figure>

<p>Then Note ! ! !</p>
<p>Flask default listen on localhost</p>
<p>if you want to use Flask to deploy an application</p>
<p>do the thing below :</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">5000</span>, debug=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Config</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Config</tag>
      </tags>
  </entry>
  <entry>
    <title>Python JSON</title>
    <url>/2021/01/02/Python-JSON/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">file = <span class="built_in">open</span>(<span class="string">&quot;xxx.json&quot;</span>)</span><br><span class="line">jsonString = file.read()</span><br><span class="line">file.close()</span><br><span class="line">jsons=json.loads(jsonString)</span><br><span class="line"><span class="keyword">for</span> json <span class="keyword">in</span> jsons:</span><br><span class="line">	...</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
        <category>Tutorial</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python List</title>
    <url>/2021/01/02/Python-List/</url>
    <content><![CDATA[<p>Don’t forget the comma</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">          [<span class="string">&#x27;j1&#x27;</span>,<span class="string">&#x27;m1&#x27;</span>,<span class="string">&#x27;x1&#x27;</span>,<span class="string">&#x27;s1&#x27;</span>,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;s2&#x27;</span>,<span class="string">&#x27;x2&#x27;</span>,<span class="string">&#x27;m2&#x27;</span>,<span class="string">&#x27;j2&#x27;</span>],</span><br><span class="line">          [<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>],</span><br><span class="line">          [<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;p1&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;p2&#x27;</span>,<span class="string">&#x27;&#x27;</span>],</span><br><span class="line">          [<span class="string">&#x27;b1&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;b2&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;b3&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;b4&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;b5&#x27;</span>],</span><br><span class="line">          [<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>],</span><br><span class="line">          [<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>],</span><br><span class="line">          [<span class="string">&#x27;B1&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;B2&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;B3&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;B4&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;B5&#x27;</span>],</span><br><span class="line">          [<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;P1&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;P2&#x27;</span>, <span class="string">&#x27;&#x27;</span>],</span><br><span class="line">          [<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>],</span><br><span class="line">          [<span class="string">&#x27;J1&#x27;</span>,<span class="string">&#x27;M1&#x27;</span>,<span class="string">&#x27;X1&#x27;</span>,<span class="string">&#x27;S1&#x27;</span>,<span class="string">&#x27;K&#x27;</span>,<span class="string">&#x27;S2&#x27;</span>,<span class="string">&#x27;X2&#x27;</span>,<span class="string">&#x27;M2&#x27;</span>,<span class="string">&#x27;J2&#x27;</span>]</span><br><span class="line">      ]</span><br></pre></td></tr></table></figure>



<p>delete element</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">del</span>(a[<span class="number">2</span>]) <span class="comment"># arg is address</span></span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">output:</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>]</span><br></pre></td></tr></table></figure>





]]></content>
  </entry>
  <entry>
    <title>Python Class</title>
    <url>/2021/01/02/Python-Class/</url>
    <content><![CDATA[<p>simple example: (within the same package)</p>
<p>Speaker.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Speaker</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sayHello</span>():</span></span><br><span class="line">        print(<span class="string">&#x27;hello&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>Test.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Speaker</span><br><span class="line">speaker = Speaker()</span><br><span class="line">speaker.sayHello()</span><br></pre></td></tr></table></figure>

<p>If in different package:</p>
<p>Test.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> packageName.Speaker <span class="keyword">import</span> Speaker</span><br><span class="line"></span><br><span class="line">speaker = Speaker()</span><br><span class="line">speaker.sayHello()</span><br></pre></td></tr></table></figure>



<p>You can also build a Constructor to initialize the object</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Speaker</span>:</span></span><br><span class="line">	name = <span class="literal">None</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name</span>):</span></span><br><span class="line">    	self.name = name</span><br><span class="line">	</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sayHello</span>():</span></span><br><span class="line">        print(<span class="string">&#x27;hello&#x27;</span>)</span><br></pre></td></tr></table></figure>

<hr>
<p>Generally, we use import like this</p>
<p>Lib.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span>():</span> <span class="comment"># this .py file do not have class, so do not need to instantiate</span></span><br><span class="line">    print(<span class="string">&#x27;hello&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>Test.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Lib</span><br><span class="line"></span><br><span class="line">Lib.hello() </span><br></pre></td></tr></table></figure>

<p>How can we import a class</p>
<p>A class Import other class and use that class’s function</p>
<p>Test.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> packageName.Speaker <span class="keyword">import</span> Speaker</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>:</span></span><br><span class="line">	speaker = Speaker() <span class="comment"># you need to instantiate the object, so that you can use it</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">testSpeak</span>():</span></span><br><span class="line">        speaker.sayHello()</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Python</category>
        <category>Tutorial</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Dict</title>
    <url>/2021/01/02/Python-Dict/</url>
    <content><![CDATA[<p>Traverse</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;b&#x27;</span>: <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;c&#x27;</span>: <span class="string">&#x27;3&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> key <span class="keyword">in</span> a:</span><br><span class="line">       print(key+<span class="string">&#x27;:&#x27;</span>+a[key])</span><br><span class="line"></span><br><span class="line">output:</span><br><span class="line">a:<span class="number">1</span></span><br><span class="line">b:<span class="number">2</span></span><br><span class="line">c:<span class="number">3</span></span><br></pre></td></tr></table></figure>

<p>Reverse</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="built_in">range</span>(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">reversed</span>(a):</span><br><span class="line">print(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4 3 2 1 0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>,<span class="number">-1</span>,<span class="number">-1</span>):</span><br><span class="line">print(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4 3 2 1 0</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
        <category>Tutorial</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python String</title>
    <url>/2021/01/02/Python-String/</url>
    <content><![CDATA[<p>List to String</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">&#x27;&#x27;</span>.join(xxList))</span><br></pre></td></tr></table></figure>

<p>String to List</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span>=text.split(<span class="string">&#x27;,&#x27;</span>) <span class="comment"># split String by &#x27;,&#x27; to List</span></span><br><span class="line">    print(<span class="built_in">list</span>)</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Python</category>
        <category>Tutorial</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python module version</title>
    <url>/2021/01/02/Python-module-version/</url>
    <content><![CDATA[<p>Sometimes we will meet a situation:</p>
<p>The version of project’s modules are lower than what we current installed</p>
<p>Then shall we uninstall the current modules ?</p>
<p>That’s not a good idea</p>
<p>Actually, we can create a “Vitualenv” (Vitual Environment)</p>
<p>Pycharm help us easily deal with it</p>
<p>You can create a “Vitualenv “ in “Setting - Python Interpreter”</p>
<p>Add a “New Environment”</p>
<p>This Environment is totally pure </p>
<p>You can install the module as you want </p>
<p>And this  “Vitualenv” will not affect the modules you have installed</p>
<p>It’s a separate Python environment just use for the project</p>
<p>The new modules will be install in the project’s folder</p>
<p>And more convenient thing is </p>
<p>After you create a “Pure Environment”</p>
<p>You can let Pycharm install the modules the project needed ! ! !</p>
]]></content>
      <categories>
        <category>Config</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Config</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring1重构</title>
    <url>/2020/11/05/Spring1%E9%87%8D%E6%9E%84/</url>
    <content><![CDATA[<p>​    1.javax 是由Tomcat提供的</p>
<p>2.Context 养成好习惯，用完记得close()</p>
<p>3.“一次性”的变量能省就省</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">	WebApplicationContext context=WebApplicationContextUtils.getWebApplicationContext(request.getServletContext());</span><br><span class="line">	context.getBean(<span class="string">&quot;helloImpl&quot;</span>,Hello.class).sayHello();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>4.Spring DI Bean之间是由依赖关系的，被引用的那个Bean应该先被创建</p>
<p>XML的构建是按从上到下顺序的</p>
<p>5.Static Factory 方法获取Bean</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bean1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.dgut.factory.StaticFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;createBean&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- you can set properties here  --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- you can also set constructor-arg here  --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dgut.factory;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticFactory</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MyBean <span class="title">createBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> MyBean(<span class="string">&quot;Alice&quot;</span>,<span class="number">15</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testStaticFactory</span><span class="params">()</span> </span>&#123;<span class="comment">//static </span></span><br><span class="line">	ConfigurableApplicationContext context =<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;StaticFactory.xml&quot;</span>);</span><br><span class="line">	System.out.print(context.getBean(<span class="string">&quot;bean1&quot;</span>,MyBean.class));</span><br><span class="line">	context.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>只要beans.xsd</p>
<p>7.BeanFactory 方法获取Bean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dgut.factory;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryBean</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> MyBean <span class="title">createBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> MyBean();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- factory instance to get bean --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;BeanFactory1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.dgut.factory.FactoryBean&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bean1&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;BeanFactory1&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;createBean&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>只要beans.xsd</p>
<p>8.由方法返回的像context这样的对象是会自动close()的</p>
<p>也就是说，可立即使用，但不能二次使用</p>
<p>9.在XML中的properties—对应的是getter和setter</p>
<p>构造函数另有constructor-arg</p>
<p>但特殊情况下，properties可以代替constructor-arg，不写constructor-arg</p>
<p>原因是缺省constructor-arg时调用不含参的构造函数</p>
<p>10.当prototype和singleton都指向同一个类时</p>
<p>prototype 就没有意义了</p>
<p>11.singleton的意义是在容启启动之初检查Bean是否有问题，很有必要</p>
<p>所有，Bean 的默认加载方式是singleton</p>
<p>12.XML中的autowire</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;Jim&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.dgut.autowire.Person&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Jim&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;address&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.dgut.autowire.Address&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;city&quot;</span> <span class="attr">value</span>=<span class="string">&quot;meizhou&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dgut.autowire;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	Address address;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, Address address)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>();</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">		<span class="keyword">this</span>.address = address;</span><br><span class="line">	&#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">----------------------------------------------------------</span><br><span class="line"><span class="keyword">package</span> com.dgut.autowire;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</span><br><span class="line">	String city;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Address</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Address</span><span class="params">(String city)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>();</span><br><span class="line">		<span class="keyword">this</span>.city = city;</span><br><span class="line">	&#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>byName对应Field(也可以说property)名</p>
<p>byType </p>
<blockquote>
<p>“byType” Autowiring if there is exactly one bean of the property type in the container. If there is<br>more than one, a fatal error is raised, and you cannot use byType autowiring for that bean. </p>
</blockquote>
<hr>
<p>第一次重构就到这里啦</p>
<p>重构追求精简，清晰，但难免也会又进死胡同</p>
<p>重构完一个地方就要进行单元测试，不然到时候全部写完测出错误很麻烦</p>
<p>这次只展示了重构后的代码</p>
<p>重构前的代码。。忘记存了，下次重构不会漏了</p>
]]></content>
      <categories>
        <category>Java</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring注解是怎么工作的</title>
    <url>/2020/11/05/Spring%E6%B3%A8%E8%A7%A3%E6%98%AF%E6%80%8E%E4%B9%88%E5%B7%A5%E4%BD%9C%E7%9A%84/</url>
    <content><![CDATA[<p>版本说明：Spring 5.2.9 </p>
<p>本文侧重于源码的解读</p>
<p>这里以@Autowired为例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AutowiredAnnotationBeanPostProcessor</span></span></span><br><span class="line"><span class="class"><span class="keyword">extends</span> <span class="title">Object</span></span></span><br><span class="line"><span class="class"><span class="keyword">implements</span> <span class="title">SmartInstantiationAwareBeanPostProcessor</span>, <span class="title">MergedBeanDefinitionPostProcessor</span>, <span class="title">PriorityOrdered</span>, <span class="title">BeanFactoryAware</span></span></span><br></pre></td></tr></table></figure>

<p><a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/beans/factory/config/BeanPostProcessor.html"><code>BeanPostProcessor</code></a> implementation that autowires annotated fields, setter methods, and arbitrary config methods. Such members to be injected are detected through annotations: by default, Spring’s <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/beans/factory/annotation/Autowired.html"><code>@Autowired</code></a> and <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/beans/factory/annotation/Value.html"><code>@Value</code></a> annotations.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processInjection</span><span class="params">(Object bean)</span> <span class="keyword">throws</span> BeanCreationException </span>&#123;</span><br><span class="line">		Class&lt;?&gt; clazz = bean.getClass();</span><br><span class="line">		InjectionMetadata metadata = findAutowiringMetadata(clazz.getName(), clazz, <span class="keyword">null</span>);</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			metadata.inject(bean, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (BeanCreationException ex) &#123;</span><br><span class="line">			<span class="keyword">throw</span> ex;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</span><br><span class="line">					<span class="string">&quot;Injection of autowired dependencies failed for class [&quot;</span> + clazz + <span class="string">&quot;]&quot;</span>, ex);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>



<p>获取AutowiringMetadata后，做inject</p>
<p>其中的AutowiringMetadata，简单的说就是@Autowired</p>
<blockquote>
<p>an <strong>annotation</strong> is a form of syntactic <a href="https://en.wikipedia.org/wiki/Metadata">metadata</a> that can be added to Java <a href="https://en.wikipedia.org/wiki/Source_code">source code</a>.</p>
</blockquote>
<p>这是维基百科上的解释</p>
<p>那Spring又是怎么确定是否存在@Autowired的呢</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> MergedAnnotation&lt;?&gt; findAutowiredAnnotation(AccessibleObject ao) &#123;</span><br><span class="line">	MergedAnnotations annotations = MergedAnnotations.from(ao);</span><br><span class="line">	<span class="keyword">for</span> (Class&lt;? extends Annotation&gt; type : <span class="keyword">this</span>.autowiredAnnotationTypes) &#123;</span><br><span class="line">		MergedAnnotation&lt;?&gt; annotation = annotations.get(type);</span><br><span class="line">		<span class="keyword">if</span> (annotation.isPresent()) &#123;</span><br><span class="line">			<span class="keyword">return</span> annotation;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Set&lt;Class&lt;? extends Annotation&gt;&gt; autowiredAnnotationTypes = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.autowiredAnnotationTypes</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AutowiredAnnotationBeanPostProcessor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.autowiredAnnotationTypes.add(Autowired.class);</span><br><span class="line">		<span class="keyword">this</span>.autowiredAnnotationTypes.add(Value.class);</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="keyword">this</span>.autowiredAnnotationTypes.add((Class&lt;? extends Annotation&gt;)</span><br><span class="line">					ClassUtils.forName(<span class="string">&quot;javax.inject.Inject&quot;</span>, AutowiredAnnotationBeanPostProcessor.class.getClassLoader()));</span><br><span class="line">			logger.trace(<span class="string">&quot;JSR-330 &#x27;javax.inject.Inject&#x27; annotation found and supported for autowiring&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line">			<span class="comment">// JSR-330 API not available - simply skip.</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>



<p>已经很清晰了，存放了Autowired.class</p>
<p>则回到findAutowiredAnnotation()中，如果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">MergedAnnotations annotations = MergedAnnotations.from(ao);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MergedAnnotations</span></span></span><br><span class="line"><span class="class"><span class="keyword">extends</span> <span class="title">Iterable</span>&lt;<span class="title">MergedAnnotation</span>&lt;<span class="title">Annotation</span>&gt;&gt;</span></span><br></pre></td></tr></table></figure>

<p>Provides access to a collection of merged annotations, usually obtained from a source such as a <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html?is-external=true"><code>Class</code></a> or <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Method.html?is-external=true"><code>Method</code></a>.</p>
<p>获取这个Bean 的Annotations</p>
<p>然后看其中是否存在Autowired</p>
<p>那么确定是否有Autowired的问题解决了，之后就是inject了</p>
<hr>
<p>首先来看看调用inject()的InjectionMetadata</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InjectionMetadata</span></span></span><br><span class="line"><span class="class"><span class="keyword">extends</span> <span class="title">Object</span></span></span><br></pre></td></tr></table></figure>

<p>Internal class for managing injection metadata. Not intended for direct use in applications.</p>
<p>对的，这个就是依赖注入里的inject</p>
<p>不过，我暂时没有想法去了解，有兴趣的同学可以继续往下了解</p>
<hr>
<p><a href="http://www.avajava.com/tutorials/lessons/how-do-i-list-the-declared-fields-of-a-class.html">Field</a></p>
]]></content>
      <categories>
        <category>Java</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>Java</tag>
      </tags>
  </entry>
</search>
