<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Android Add Views</title>
    <url>/2021/01/06/Android-Add-Views/</url>
    <content><![CDATA[<p>Example</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">signDataView = SuperTextView(requireContext())</span><br><span class="line">buildSignDataView(signDataView, signData)</span><br><span class="line">activity?.runOnUiThread &#123;</span><br><span class="line">	signDataListLayout?.addView(signDataView)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Android</category>
        <category>Tutorial</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Tutorial</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Bundle</title>
    <url>/2021/01/04/Android-Bundle/</url>
    <content><![CDATA[<p>Bundle can be  use for transport data between Fragment</p>
<p>Send</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> bundle = Bundle()</span><br><span class="line">bundle.putString(<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;GFG :- Main Activity&quot;</span>)</span><br><span class="line">NavUtil.navController?.navigate(R.id.signStateForStudent,bundle)</span><br><span class="line"><span class="comment">// When you use navigation</span></span><br></pre></td></tr></table></figure>

<p>Get</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> bundle = Intent.getExtras()</span><br><span class="line">bundle.getString(<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;Default&quot;</span>) </span><br><span class="line"><span class="comment">// arg2 will be return when &quot;key1&quot; can&#x27;t be foud in bundle</span></span><br></pre></td></tr></table></figure>

<p>But it can just be transported one time ! !</p>
<p>When you back to the fragment, the bundle will gone </p>
<p>Bundle just can be use for the “one-time” issue</p>
<hr>
<p>For the data you need to use many time </p>
<p>You can use companion object {} to solve that problem</p>
<p>All fragments can get the data directly from the companion object {} within an activity</p>
]]></content>
      <categories>
        <category>Android</category>
        <category>Transport Data</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android DeviceId</title>
    <url>/2021/01/04/Android-DeviceId/</url>
    <content><![CDATA[<p>Example</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var deviceId&#x3D; Settings.System.getString(contentResolver, Settings.System.ANDROID_ID);</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Android</category>
        <category>Tutorial</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Tutorial</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Back Button</title>
    <url>/2021/01/04/Android-Back-Button/</url>
    <content><![CDATA[<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onBackPressed</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.onBackPressed()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>This function is what your Android do when you press the back button</p>
<p>If you don’t want user use back button somewhere</p>
<p>Just do like this</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onBackPressed</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// super.onBackPressed()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>Android</category>
        <category>Tutorial</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Tutorial</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Dialog Processing</title>
    <url>/2021/01/04/Android-Dialog-Processing/</url>
    <content><![CDATA[<p>Display a circle in dialog when loading something</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">configLoadingProgress</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> loadingDialogBuilder = AlertDialog.Builder(<span class="keyword">this</span>)</span><br><span class="line">    <span class="keyword">val</span> loadingProgress = ProgressBar(<span class="keyword">this</span>)</span><br><span class="line">    loadingDialogBuilder.setView(loadingProgress)</span><br><span class="line">    loadingDialogBuilder.setTitle(<span class="string">&quot;正在登陆...&quot;</span>)</span><br><span class="line">    runOnUiThread &#123;</span><br><span class="line">        loadingDialog = loadingDialogBuilder.create()</span><br><span class="line">        loadingDialog!!.show()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The circle is just a ProgressBar widget in dialog</p>
<p>Note !</p>
<p>1.Create and show a dialog should be done by UI Thread</p>
<p>2.There are some callback functions about the dialog, you can check the document</p>
<p>If you want to close the dialog by program </p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">loadingDialog?.cancel()</span><br></pre></td></tr></table></figure>

<p>Note !</p>
<p>1.You should invoke cancel() from dialog but not dialogBuilder</p>
<p>2.dialog = dialogBuilder.create()</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> loadingDialogBuilder = AlertDialog.Builder(<span class="keyword">this</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Android</category>
        <category>Tutorial</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Tutorial</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Fragment And Activity</title>
    <url>/2021/01/04/Android-Fragment-And-Activity/</url>
    <content><![CDATA[<p>Fragment’s feature is reusable</p>
<p>A fragment is a completed page, and you can use a fragment tag(&lt;fragment/&gt;) to insert it to any Layout</p>
<p>The code in fragment activity and normal activity is different</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Yes, fragment also has it&#39;s activity called &quot;Fragment Activity&quot;</span><br></pre></td></tr></table></figure>

<p>Difference</p>
<p>1.You can use “applicationContext” directly in normal activity </p>
<p>But in Fragment Activity, you can’t !</p>
<p>You need to invoke a method — getContext()</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kotlin can use &quot;context&quot; directly, but in fact, it invoke the method getContext()</span><br></pre></td></tr></table></figure>

<p>2.You can use “runOnUiThread” directly in normal activity </p>
<p>But in Fragment Activity,  you can’t !</p>
<p>You need to get the Activity which is connected to UI Thread</p>
<p>Then </p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">activity?.runOnUiThread &#123;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Conclusion:</p>
<p>There are some difference, but that’s not a big deal</p>
<p>Android SDK has solved that problem for us  </p>
]]></content>
      <categories>
        <category>Android</category>
        <category>Fragment</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Intent Transport Data</title>
    <url>/2021/01/04/Android-Intent-Transport-Data/</url>
    <content><![CDATA[<p>Example:</p>
<p>Send data</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">toStudentPage</span><span class="params">(loginInfo: <span class="type">JSONObject</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> intent = Intent(<span class="keyword">this</span>, StudentActivity::<span class="keyword">class</span>.java).apply &#123;&#125;</span><br><span class="line">    intent.putExtra(<span class="string">&quot;studentId&quot;</span>, loginInfo[<span class="string">&quot;studentId&quot;</span>].toString())</span><br><span class="line">    intent.putExtra(<span class="string">&quot;studentName&quot;</span>, loginInfo[<span class="string">&quot;studentName&quot;</span>].toString())</span><br><span class="line">    intent.putExtra(<span class="string">&quot;classId&quot;</span>, loginInfo[<span class="string">&quot;classId&quot;</span>].toString())</span><br><span class="line">    intent.putExtra(<span class="string">&quot;className&quot;</span>, loginInfo[<span class="string">&quot;className&quot;</span>].toString())</span><br><span class="line">    startActivity(intent)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Get data</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> studentId = intent.getStringExtra(<span class="string">&quot;studentId&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> studentName = intent.getStringExtra(<span class="string">&quot;studentName&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> classId = intent.getStringExtra(<span class="string">&quot;classId&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> className = intent.getStringExtra(<span class="string">&quot;className&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>Note:</p>
<p>Intent is like a build-in object in Kotlin</p>
]]></content>
      <categories>
        <category>Android</category>
        <category>Tutorial</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Tutorial</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Fragment Tutorial</title>
    <url>/2021/01/06/Android-Fragment-Tutorial/</url>
    <content><![CDATA[<p>1.New A Fragment</p>
<p>“New” – “Fragment” – “Fragment Blank”</p>
<p>Then we can get an fragment activity and relative layout file</p>
<p>2.Add Fragment To Activity</p>
<p>In target xml file</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">fragment</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/xxx&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">&quot;xxx&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p> Note !</p>
<p>Name and Id is essential ! ! !</p>
<p>Name is the fragment activity you just created</p>
<p>(Just the class name of the fragment activity)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">com.exmaple.BlankFragment</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class BlankFragment : Fragment()</span><br></pre></td></tr></table></figure>

<p>Then you can name id as you like, but do not forget it, it is really important ! !</p>
<hr>
<p>After two steps, you can see a fragment is added to an activity</p>
]]></content>
      <categories>
        <category>Android</category>
        <category>Tutorial</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Tutorial</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Layout Parameter</title>
    <url>/2021/01/06/Android-Layout-Parameter/</url>
    <content><![CDATA[<p>Build</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> layoutParamsForInfoUnit: LinearLayout.LayoutParams? = <span class="literal">null</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">buildLayoutParamsForInfoUnit</span><span class="params">(context: <span class="type">Context</span>?)</span></span>&#123;</span><br><span class="line">layoutParamsForInfoUnit =</span><br><span class="line">                LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, DpUtil.dip2px(context,<span class="number">100f</span>))</span><br><span class="line">layoutParamsForInfoUnit?.setMargins(DpUtil.dip2px(context, <span class="number">10f</span>), DpUtil.dip2px(context,<span class="number">10f</span>), DpUtil.dip2px(context,<span class="number">10f</span>), <span class="number">0</span>) <span class="comment">// left,top,right,bottom</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Use</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">signDataView!!.layoutParams &#x3D; LayoutUtil.layoutParamsForInfoUnit</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Android</category>
        <category>Tutorial</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Tutorial</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Layout Rule</title>
    <url>/2021/01/04/Android-Layout-Rule/</url>
    <content><![CDATA[<p>1.About Weight</p>
<p>Allocate the rest space by it’s weight</p>
<p>Pay attention to the “Rest Space”</p>
<p>So it’s not right to use weight for all widgets</p>
<p>For widget like TextView, we should give it a fixed value of height</p>
<p>So that the text will not be strange</p>
<p>But for the widget like ScrollView we’d better use weight</p>
<p>because they should can be stretched</p>
<p>Note !</p>
<p>weight can be decimal ~</p>
<hr>
<p>2.Center</p>
<p>If you want to put a image in the center of the whole page</p>
<p>Do like this </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_weight</span>=<span class="string">&quot;9&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;0dp&quot;</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">            <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_weight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;0dp&quot;</span>/&gt;</span></span><br><span class="line">            </span><br><span class="line">            <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:src</span>=<span class="string">&quot;@drawable/success_sign&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_weight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;0dp&quot;</span>/&gt;</span></span><br><span class="line">            </span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>That’s the power of weight</p>
<p>With weight, the view can be stretched to fill the blank</p>
<p>Beside this center </p>
<p>If You just want to put a view to the center of a layout</p>
<p>Then use the attribute “layout_gravity”, assign it “center”</p>
<p>“layout_gravity”, decide the position of a widget within a layout</p>
<p>“gravity”, decide the text position within a widget</p>
<hr>
<p>3.ViewGroup</p>
<p>Like </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>&lt;LinearLayout&gt;&lt;/LinearLayout&gt; is allow to add view into it</p>
<p>&lt;/LinearLayout&gt; is not allow add view into it</p>
]]></content>
      <categories>
        <category>Android</category>
        <category>Layout</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Lifecycle Of Activity</title>
    <url>/2021/01/04/Android-Lifecycle-Of-Activity/</url>
    <content><![CDATA[<p><a href="https://developer.android.com/guide/components/activities/activity-lifecycle">Document</a></p>
<p>onCreate() just be invoked one time</p>
<p>onStart() will be </p>
]]></content>
      <categories>
        <category>Android</category>
        <category>Tutorial</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Turorial</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Request</title>
    <url>/2021/01/04/Android-Request/</url>
    <content><![CDATA[<p>How get data by request in Android?</p>
<p>Here is an example</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">    Thread()&#123;</span><br><span class="line">        <span class="keyword">val</span> url = URL(<span class="string">&quot;https://api.thecatapi.com/v1/images/search&quot;</span>)</span><br><span class="line">        <span class="keyword">val</span> connection = url.openConnection() <span class="keyword">as</span> HttpURLConnection</span><br><span class="line">        connection.requestMethod = <span class="string">&quot;GET&quot;</span></span><br><span class="line">        <span class="keyword">val</span> inputstream = connection.inputStream</span><br><span class="line">        <span class="keyword">val</span> reader = inputstream.bufferedReader()</span><br><span class="line">        <span class="keyword">var</span> response = StringBuilder()</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">val</span> line = reader.readLine()</span><br><span class="line">            <span class="keyword">if</span> (line == <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            response.append(line)</span><br><span class="line">        &#125;</span><br><span class="line">        reader.close()</span><br><span class="line">        connection.disconnect()</span><br><span class="line">        <span class="keyword">val</span> jsons = JSONArray(response.toString())</span><br><span class="line">        runOnUiThread&#123;</span><br><span class="line">...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;.start()</span><br></pre></td></tr></table></figure>

<p>Note:</p>
<p>1.You can’t request in UI thread, so you need to create a new thread to do this job</p>
<p>2.The connection is actually established when you get inputStream from connection</p>
<p>3.You can use try-catch here to deal with the issue that connect time out </p>
<p>4.You can’t update UI in this new thread directly, you must use runOnUiThread{} to update UI</p>
<p>5.Every time you establish a connection remember to close it, it’s a good habit</p>
<hr>
<p>How to deal with JsonArray in Android</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> signDataList = responseJson[<span class="string">&quot;activityInfo&quot;</span>] <span class="keyword">as</span> JSONArray</span><br><span class="line"><span class="keyword">for</span>(index <span class="keyword">in</span> <span class="number">0</span> until signDataList.length())&#123;</span><br><span class="line">	signDataList[index]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<hr>
<p>Note</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">The request codes can be integrated into a util class</span><br><span class="line">So that you don&#39;t need to write the repeat codes again and again</span><br><span class="line">That&#39;s the power of Refactor !</span><br></pre></td></tr></table></figure>

<p>Just like this</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getDataByRequest</span><span class="params">(activity:<span class="type">Activity</span>?, context:<span class="type">Context</span>, urlForLogin:<span class="type">URL</span>?)</span></span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        getDataByUrl(urlForLogin)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">        e.printStackTrace()</span><br><span class="line">        buildConnectFailDialog(context)</span><br><span class="line">        activity?.runOnUiThread &#123;</span><br><span class="line">            connectFailDialog = connectFailDialogBuilder?.create()</span><br><span class="line">            connectFailDialog?.show()</span><br><span class="line">        &#125;</span><br><span class="line">        Thread.currentThread().join()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getDataByUrl</span><span class="params">(url: <span class="type">URL</span>?)</span></span>&#123;</span><br><span class="line">    connection = url?.openConnection() <span class="keyword">as</span> HttpURLConnection</span><br><span class="line">    connection?.requestMethod = <span class="string">&quot;GET&quot;</span></span><br><span class="line">    inputStream = connection?.inputStream</span><br><span class="line">    reader = inputStream?.bufferedReader()</span><br><span class="line">    response = StringBuilder()</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">val</span> line = reader?.readLine() ?: <span class="keyword">break</span></span><br><span class="line">        response?.append(line)</span><br><span class="line">    &#125;</span><br><span class="line">    reader?.close()</span><br><span class="line">    connection?.disconnect()</span><br><span class="line">    responseJson = JSONObject(response.toString())</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">buildConnectFailDialog</span><span class="params">(context: <span class="type">Context</span>?)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (connectFailDialogBuilder == <span class="literal">null</span>) &#123;</span><br><span class="line">        connectFailDialogBuilder = AlertDialog.Builder(context!!)</span><br><span class="line">        connectFailDialogBuilder?.setTitle(<span class="string">&quot;提示信息&quot;</span>)</span><br><span class="line">        connectFailDialogBuilder?.setMessage(<span class="string">&quot;连接服务器失败&quot;</span>)</span><br><span class="line">        connectFailDialogBuilder?.setPositiveButton(<span class="string">&quot;确定&quot;</span>) &#123; dialog, id -&gt; &#123;&#125; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>There is a problem — in a separate util class how can util get the application’s context or activity ?</p>
<p>Solution:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Just pass them as parameters !</span><br></pre></td></tr></table></figure>

<p>Context, activity they are not something special</p>
<p>In program, they are can be represent just with memory address</p>
<p>So pass their address as parameter is the way to access them !</p>
]]></content>
      <categories>
        <category>Android</category>
        <category>HTTP</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Kotlin</tag>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Navigation Tutorial</title>
    <url>/2021/01/06/Android-Navigation-Tutorial/</url>
    <content><![CDATA[<p>1.New A Navigation</p>
<p>“res” – “New” – “Android Resource File” – “Resource Type” – “Navigation”</p>
<p>Give your navigation a name, then click “OK”</p>
<p>Then you will got a xml file of your navigation</p>
<p>2.Add A NavHost To Your Activity</p>
<p>Go to the xml file of your activity</p>
<p>Use “Design” model </p>
<p>“Palette” – “Container” – “NavHostFragment”</p>
<p>Drag it to the phone</p>
<p>And choose a navigation xml file for the container</p>
<p>Then we finish the basic of navigation</p>
<p>3.Add Fragments To Navigation</p>
<p>Go to the xml file of your navigation </p>
<p>Still use “Design” model</p>
<p>Then “New Destination”</p>
<p>4.Use Navigation</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> navHostFragment =supportFragmentManager?.findFragmentById(R.id.fragment) <span class="keyword">as</span> NavHostFragment</span><br><span class="line"><span class="keyword">val</span> navController = navHostFragment?.navController</span><br><span class="line">navController.navigate(R.id.hello)</span><br></pre></td></tr></table></figure>

<p>Then you will be navigate to a fragment named “hello”</p>
<hr>
<p>supportFragmentManager</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">the FragmentManager for interacting with fragments associated with this activity.</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Android</category>
        <category>Tutorial</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Tutorial</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Swip Refresh</title>
    <url>/2021/01/06/Android-Swip-Refresh/</url>
    <content><![CDATA[<p>XML</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">androidx.swiperefreshlayout.widget.SwipeRefreshLayout</span></span></span><br><span class="line"><span class="tag">	<span class="attr">android:id</span>=<span class="string">&quot;@+id/location_swipe_for_student&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">android:layout_height</span>=<span class="string">&quot;100dp&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">androidx.swiperefreshlayout.widget.SwipeRefreshLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Config</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">configSwipeRefresh</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> swipe =</span><br><span class="line">        view?.findViewById&lt;SwipeRefreshLayout&gt;(R.id.location_swipe_for_student)</span><br><span class="line">    swipe?.setOnRefreshListener &#123;</span><br><span class="line">        MapUtil.mLocationClient?.startLocation()</span><br><span class="line">        refreshActivity()</span><br><span class="line">        swipe.isRefreshing = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Android</category>
        <category>Tutorial</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Tutorial</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Studio SDK config</title>
    <url>/2021/03/08/Android-Studio-SDK-config/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Emulator: emulator: ERROR: Unknown AVD name [Pixel_2_API_29], use -list-avds</span><br></pre></td></tr></table></figure>



<p>出现这种情况一般是.android文件不在ANDROID_SDK_HOME目录下<br>只需要将系统默认的存放文件的地方：C:/用户/***/.android 复制到你ANDROID_SDK_HOME所指目录下即可</p>
]]></content>
  </entry>
  <entry>
    <title>Android Thread</title>
    <url>/2021/01/04/Android-Thread/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Android Tool Bar (On Top)</title>
    <url>/2021/01/06/Android-Tool-Bar-On-Top/</url>
    <content><![CDATA[<p>XML</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Toolbar</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/tool_bar_for_student_signState&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_weight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:navigationIcon</span>=<span class="string">&quot;@drawable/back&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">&quot;@color/xui_config_color_titlebar&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:titleTextColor</span>=<span class="string">&quot;@color/white&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;打卡&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textColor</span>=<span class="string">&quot;@color/white&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;20sp&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Toolbar</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>ConfigBackButton</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">configBackButton</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">val</span> backBtn = view?.findViewById&lt;Toolbar&gt;(R.id.tool_bar_for_student_signState)</span><br><span class="line">    backBtn?.setNavigationOnClickListener &#123;</span><br><span class="line">        SignDataForStudent.DISPLAY_TYPE = SignDataForStudent.DISPLAY_SIGN_FIRST</span><br><span class="line">        StudentActivity.tabSegment?.selectTab(<span class="number">1</span>)</span><br><span class="line">        NavUtil.navController?.popBackStack()</span><br><span class="line">        NavUtil.navController?.navigate(R.id.signDataForStudent)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Android</category>
        <category>Tutorial</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Tutorial</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Version</title>
    <url>/2021/01/04/Android-Version/</url>
    <content><![CDATA[<p>The API version and Android version are different</p>
<p>API version is Android SDK version</p>
<p>It’s usually for developer</p>
<p>Developer need Android SDK when making App</p>
<p>And different SDK version will have usage, developer need to check the relative document</p>
<p>And Android version is usually for user</p>
<p>Like we can check our Android version of our mobile phone</p>
<hr>
<p>Generally, Android version is associated with SDK version</p>
<p>example:</p>
<table>
<thead>
<tr>
<th>API Level</th>
<th>Android Version</th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>30</td>
<td>11</td>
<td></td>
<td></td>
</tr>
<tr>
<td>29</td>
<td>10</td>
<td></td>
<td></td>
</tr>
<tr>
<td>28</td>
<td>9</td>
<td></td>
<td></td>
</tr>
<tr>
<td>27</td>
<td>8.1</td>
<td></td>
<td></td>
</tr>
<tr>
<td>26</td>
<td>8.0</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>If you use lower version of API to write an App</p>
<p>It will have better compatibility</p>
<p>But you can’t use the new feature of the SDK</p>
<p>It depends on you</p>
<p>Haha</p>
]]></content>
      <categories>
        <category>Android</category>
        <category>Tutorial</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Tutorial</tag>
      </tags>
  </entry>
  <entry>
    <title>Android px dp sp</title>
    <url>/2021/01/04/Android-px-dp-sp/</url>
    <content><![CDATA[<p>px is for the general unit</p>
<p>Note !</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">devices only know px</span><br><span class="line">dp and sp is just use for display the appropriate views on different screen</span><br></pre></td></tr></table></figure>



<p>dp is usually use for layout</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">density-independent pixels (dip,dp)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">px &#x3D; dp * (dpi &#x2F; 160)</span><br></pre></td></tr></table></figure>

<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">dip2px</span><span class="params">(context: <span class="type">Context</span>?, dpValue: <span class="type">Float</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">    <span class="keyword">val</span> scale = context?.resources?.displayMetrics?.density</span><br><span class="line">    <span class="keyword">return</span> (dpValue * scale!! + <span class="number">0.5f</span>).toInt()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Note </p>
<p>You can pass context as a parameter</p>
<blockquote>
<p>dpi: Dots Per Inch</p>
</blockquote>
<p>sp is usually use for text size</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scale-independent pixels</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>Android</category>
        <category>Layout</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Git Basic Commands</title>
    <url>/2021/01/04/Git-Basic-Commands/</url>
    <content><![CDATA[<p>1.Push</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>

<p>push master branch</p>
<hr>
<p>2.Pull</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure>



<p>3.Remote Address</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote show</span><br></pre></td></tr></table></figure>

<p>Add remote address</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote add origin https:&#x2F;&#x2F;github.com&#x2F;fengcangjun&#x2F;learngit.git</span><br></pre></td></tr></table></figure>

<p>Delete origin remote address</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote rm origin</span><br></pre></td></tr></table></figure>



<hr>
]]></content>
      <categories>
        <category>Git</category>
        <category>Tutorial</category>
      </categories>
      <tags>
        <tag>Tutorial</tag>
        <tag>Git</tag>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>Chinese Chess Conclusion</title>
    <url>/2021/01/02/Chinese-Chess-Conclusion/</url>
    <content><![CDATA[<p>1.Alpha-Beta Search</p>
<p>Understand this algorithm in this way</p>
<p>First is a question — how computer know the best move?</p>
<p>Answer: This algorithm will evaluate the score, which represent the chance the computer will win</p>
<p>So the best move is the move that make the highest score</p>
<p>Second question — how computer know to protect it’s King?</p>
<p>Answer: This algorithm will simulate the move for both red and black</p>
<p>and it will simulate at least 2 depth, the algorithm will do the things follow:</p>
<p>evaluate the current score then start to search (simulate)</p>
<p>Simulate① – computer legal move “A”</p>
<p>Keep on simulate② – people legal move “B”</p>
<p>When reach the depth, start to evaluate the score again</p>
<p>If Simulate② make the score reduce,</p>
<p>Which means that the computer’s Simulate① move “A” makes computer be in dangerous</p>
<p>And computer will avoid this kind of move</p>
<p>That’s why computer knows to protect it’s King</p>
<p>If it’s King is killed, it’s score will be super low</p>
<p>Then the algorithm will tell the computer do not move in that way</p>
<p>So that avoid the King be killed</p>
<p>I learn the implement of the algorithm from this <a href="https://github.com/dengl11/ChineseChessAI">github project</a></p>
<hr>
<p>2.Object Oriented is a very idea</p>
<p>It’s the project will be pretty clear when you encapsulate the relative functions in a .py file as a class</p>
<hr>
<p>3.Cooperation </p>
<p>The most important thing is responsibility</p>
<p>Then is the ability to solve the problem</p>
<hr>
<p>4.Refactor</p>
<p>If you always think implement first and refactor in the end</p>
<p>The refactor will be pretty pretty hard</p>
<p>The best solution is do the refactor job when you are coding</p>
<p>And remember, don’t straightly coding</p>
<p>Think more about efficiency, readability, maintainability</p>
<hr>
<p>5.Record</p>
<p>It’s a good habit to record the bug when you meet with it</p>
<p> And you can create two files</p>
<p>“Bugs” record the bug waiting for solving</p>
<p>“Solved Bugs” record the bug and the solution</p>
<p>Maybe you can record other things more than bug</p>
<p>Whatever, it’s a good habit</p>
<hr>
<p>6.Rest</p>
<p>Do not keep coding for a long time</p>
<p>It’s will make you brain numb</p>
<p>And the efficiency will be lower</p>
<hr>
<p>7.Intresting Experience</p>
<p>When the .txt file is big enough</p>
<p>It will cost a long time to open the file</p>
<p>You will think “Wow ! My computer can’t even deal with a txt file”</p>
<p>And when you trying to modify some contents</p>
<p>It also cost a long time ! Haha</p>
<hr>
<p>8.Debug</p>
<p>With a long time apart with C and C++</p>
<p>I almost forget the efficient way to find a bug — “Debug”</p>
<p> Step by step, checking the variable to find the bug</p>
]]></content>
      <categories>
        <category>Project Conclusion</category>
      </categories>
      <tags>
        <tag>Project Conclusion</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask Cors</title>
    <url>/2021/01/02/Flask-Cors/</url>
    <content><![CDATA[<p>Cors solution</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from flask_cors import *</span><br><span class="line">CORS(app, supports_credentials&#x3D;True)</span><br></pre></td></tr></table></figure>

<p>Then Note ! ! !</p>
<p>Flask default listen on localhost</p>
<p>if you want to use Flask to deploy an application</p>
<p>do the thing below :</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">5000</span>, debug=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Config</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Config</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Git Fix Conflict</title>
    <url>/2021/01/04/Git-Fix-Conflict/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line"></span><br><span class="line">xxxxxx &#x2F;&#x2F; here is the origin content</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">xxxxxx &#x2F;&#x2F; here is the content you pull</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;j43jk2293i23jk2n3</span><br></pre></td></tr></table></figure>

<p>Generally, you just need to delete the origin content , and use the new content</p>
<p>Strongly recommend you to use “Github Desktop”</p>
<p>It will clearly display all conflicts and you can fix them directly</p>
]]></content>
      <categories>
        <category>Git</category>
        <category>Tutorial</category>
      </categories>
      <tags>
        <tag>Tutorial</tag>
        <tag>Git</tag>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>Github Basic Config</title>
    <url>/2021/01/04/Github-Basic-Config/</url>
    <content><![CDATA[<p>1.Usage of “.gitignore “ file</p>
<p>When you push, you can exclude some files using “.gitignore “ </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*.properties</span><br></pre></td></tr></table></figure>

<p>means exclude all “.properties” file</p>
<p>You can also exclude a single file, just type it’s whole file name</p>
<p>Usually, “.gitignore “ file can’t work directly, you need to do this also</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git rm -r --cached .</span><br></pre></td></tr></table></figure>

<p>Then push again</p>
<hr>
]]></content>
      <categories>
        <category>Config</category>
        <category>Github</category>
      </categories>
      <tags>
        <tag>Tutorial</tag>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>Github SSH Deploy Key</title>
    <url>/2021/01/04/Github-SSH-Deploy-Key/</url>
    <content><![CDATA[<p>With Deploy key you can push directly, do not need to input username and password every time</p>
<p>Generate SSH key</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -f deploy_key_blog -C &quot;1020151695@qq.com&quot;</span><br></pre></td></tr></table></figure>

<p> Then press “Enter” twice is OK</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">E-mail address like an &quot;id&quot;</span><br><span class="line">So that Github repository know who you are</span><br><span class="line">And you don&#39;t need to input username and password again</span><br></pre></td></tr></table></figure>

<p>Then it will create a new file named “deploy_key_blog.pub”</p>
<p>Check it’s content use the command:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">more deploy_key_blog.pub</span><br></pre></td></tr></table></figure>

<p>Then copy the content and go to the project in Github</p>
<p>“Setting”–”Deploy keys”</p>
<p>Just do it !</p>
<p>And SSH key absolutely just support the ssh way</p>
<p>If you use HTTPS remote address, you need to switch it </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote rm origin      &#x2F;&#x2F; delete origin remote address </span><br><span class="line"></span><br><span class="line">git remote add origin git@github.com:nickchou&#x2F;gocode.git  &#x2F;&#x2F; apply new remote address</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Github</category>
        <category>Tutorial</category>
      </categories>
      <tags>
        <tag>Tutorial</tag>
        <tag>Git</tag>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>Google E-mail Gmail</title>
    <url>/2021/03/08/Google-E-mail-Gmail/</url>
    <content><![CDATA[<p>QQ邮箱中选择gmail注册</p>
<p>中国的电话号码前加+86</p>
]]></content>
      <categories>
        <category>Google</category>
      </categories>
      <tags>
        <tag>Tutorial</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo Live2D</title>
    <url>/2021/03/08/Hexo-Live2D/</url>
    <content><![CDATA[<p><a href="https://github.com/EYHN/hexo-helper-live2d">github</a> (You can download model here)</p>
<p>(1) Install hexo-helper-live2d</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure>

<p>(2)prepare model file</p>
<p>put the folder in “node_modules”</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">e.g. folder name &quot;live2d-widget-model-miku&quot;</span><br></pre></td></tr></table></figure>

<p>(2) install model</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install &#123;your model&#39;s package name&#125;</span><br></pre></td></tr></table></figure>

<p>(3) _config.yml in Hexo root folder add:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Live2D</span></span><br><span class="line"><span class="comment">## https://github.com/xiazeyu/live2d-widget.js</span></span><br><span class="line"><span class="comment">## https://l2dwidget.js.org/docs/class/src/index.js~L2Dwidget.html#instance-method-init</span></span><br><span class="line"><span class="attr">live2d:</span></span><br><span class="line">  <span class="attr">model:</span></span><br><span class="line">    <span class="attr">use:</span> <span class="string">live2d-widget-model-miku</span></span><br><span class="line">    <span class="attr">scale:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">hHeadPos:</span> <span class="number">0.5</span></span><br><span class="line">    <span class="attr">vHeadPos:</span> <span class="number">0.618</span></span><br><span class="line">  <span class="attr">display:</span></span><br><span class="line">    <span class="attr">superSample:</span> <span class="number">2</span></span><br><span class="line">    <span class="attr">width:</span> <span class="number">150</span></span><br><span class="line">    <span class="attr">height:</span> <span class="number">300</span></span><br><span class="line">    <span class="attr">position:</span> <span class="string">right</span></span><br><span class="line">    <span class="attr">hOffset:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">vOffset:</span> <span class="number">-20</span></span><br><span class="line">  <span class="attr">mobile:</span></span><br><span class="line">    <span class="attr">show:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">scale:</span> <span class="number">0.5</span></span><br><span class="line">  <span class="attr">react:</span></span><br><span class="line">    <span class="attr">opacityDefault:</span> <span class="number">0.7</span></span><br><span class="line">    <span class="attr">opacityOnHover:</span> <span class="number">0.2</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo Theme</title>
    <url>/2021/03/08/Hexo-Theme/</url>
    <content><![CDATA[<p>Next主题</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>



<p>_config.yml新增</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure>



<p>在Next主题的配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">local_search:</span><br><span class="line">  enable: true</span><br><span class="line">  # if auto, trigger search by changing input</span><br><span class="line">  # if manual, trigger search by pressing enter key or search button</span><br><span class="line">  trigger: auto</span><br><span class="line">  # show top n results per article, show all results by setting to -1</span><br><span class="line">  top_n_per_article: 1</span><br><span class="line">  # unescape html strings to the readable one</span><br><span class="line">  unescape: false</span><br></pre></td></tr></table></figure>

<p>把local_search enable 置true就好了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode Rule</title>
    <url>/2021/03/08/Leetcode-Rule/</url>
    <content><![CDATA[<p>1</p>
<p>don’t</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span>(<span class="params">x:<span class="built_in">int</span></span>)</span></span><br></pre></td></tr></table></figure>



<p>2</p>
<p>自定义数据结构</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br></pre></td></tr></table></figure>

<p>3</p>
<p>set hash 导致输出导致OJ上不一致</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">太狠了</span><br></pre></td></tr></table></figure>

<p>4</p>
<p>leetcode 全局还是传参</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">传参！</span><br></pre></td></tr></table></figure>

<p>5</p>
<p>库</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findOrder</span>(<span class="params">self, numCourses, prerequisites</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type numCourses: int</span></span><br><span class="line"><span class="string">        :type prerequisites: List[List[int]]</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>note</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Code</title>
    <url>/2021/01/03/Python-Code/</url>
    <content><![CDATA[<ol>
<li><p>The Name of variable</p>
<p>Not like Java — “dataSet”</p>
<p>Python always use “data_set”</p>
</li>
<li><p>Comments</p>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">&#x27;hello world&#x27;</span>)   <span class="comment"># note the blank space</span></span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>Python</category>
        <category>Coding</category>
      </categories>
      <tags>
        <tag>Tutorial</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo踩坑</title>
    <url>/2020/11/05/Hexo%E8%B8%A9%E5%9D%91/</url>
    <content><![CDATA[<p>1.ssh密匙</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;邮件地址&quot;</span></span><br></pre></td></tr></table></figure>

<p>找到<code>.ssh\id_rsa.pub</code>文件，记事本打开并复制里面的内容，打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key：</p>
<p>将刚复制的内容粘贴到key那里，title随便填，保存。</p>
<p>Win10下的~目录就是对应User下</p>
<p>然后，id_rsa.pub这个文件不能直接打开，需要命令行指令</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">more id_rsa.pub</span><br></pre></td></tr></table></figure>

<p>2.常用指令</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">hexo new &quot;postName&quot; #新建文章</span><br><span class="line">hexo generate #生成静态页面至public目录</span><br><span class="line">hexo server #开启预览访问端口（默认端口4000，&#x27;ctrl + c&#x27;关闭server）</span><br><span class="line">hexo deploy #部署到GitHub</span><br><span class="line">hexo version  #查看Hexo的版本</span><br><span class="line"># 你先执行hexo clean 然后再删除文章就可以了</span><br></pre></td></tr></table></figure>

<p>部署步骤：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>

<p>3.每篇文章的配置</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: Spring注解是怎么工作的</span><br><span class="line">date: 2020-11-05 17:05:39</span><br><span class="line">tags:</span><br><span class="line">- Spring</span><br><span class="line">- Java</span><br><span class="line">categories:</span><br><span class="line">- [Java,Spring]</span><br></pre></td></tr></table></figure>

<p>4.配置文件的修改</p>
<p>_config.yml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: 藏经阁</span><br><span class="line">subtitle: &#39;&#39;</span><br><span class="line">description: &#39;太多东西要学啦&#39;</span><br><span class="line">keywords: Java</span><br><span class="line">author: FreeJim</span><br><span class="line">language: zh</span><br><span class="line">timezone: &#39;Asia&#x2F;Hong_Kong&#39;</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https:&#x2F;&#x2F;github.com&#x2F;a1020151695&#x2F;a1020151695.github.io</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure>

<p>具体可查<a href="https://hexo.io/docs/configuration">官方文档</a></p>
<p>5.自定义域名</p>
<p>Setting中设置自定义域名，然后Save保存</p>
<p>阿里云域名管理，要添加两个纪录</p>
<p>一个是CNAME www 把    把当前域名和xxx.github.io联系起来</p>
<p>其实是把xxx.github.io指向你自己的域名</p>
<p>CNAME content(Just the domain)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">freejim.icu </span><br></pre></td></tr></table></figure>

<p>第二个是@ 你自己的域名指向一个IP（即xxx.github.io的实际IP）</p>
<p>这里我踩了坑！</p>
<p>你不能在你自己电脑上Ping！！！！</p>
<p>拿你的云服务器去ping才有用</p>
<p>或者不需要服务器，直接网上找一个域名解析的网站，去查</p>
<p>例如<a href="https://site.ip138.com/">这个</a></p>
<p>gtihub上看得见的文件都是在“source”文件夹里面的—CNAME–域名配置文件</p>
<p>然后 如果要向google提交验证的话，我们用meta的方式</p>
<p>如果用html的方式的话，hexo部署的时候会修改html文件里的内容</p>
<p>导致google无法验证</p>
<p>然后你也不能直接放到github中</p>
<p>因为github仓库不完全等于hexo部署的服务器</p>
<p>所以我们选择meta</p>
<p>然后hexo是通过各主题模板来修改、生成各网页的</p>
<p>和meta相关的head的模板在这</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">themes\landscape\layout\_partial\head.ejs</span><br></pre></td></tr></table></figure>

<p>把google 给的meta 加进去就好了</p>
<p>添加后可以在这里查看网站数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;search.google.com&#x2F;search-console&#x2F;about</span><br></pre></td></tr></table></figure>

<p>查看是否验证成功</p>
<p>几天后，google搜索：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">site:“你的网站”</span><br></pre></td></tr></table></figure>

<p>之后我看了百度的验证</p>
<p>不行！</p>
<p>github把百度屏蔽掉了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">不到一分钟前freejim.icu使用HTML标签验证</span><br><span class="line">原因：服务器连接超时，请检查服务器设置或者稍后重试。</span><br><span class="line">问题分析&amp;解决办法： 连接网站时超时，可能是网络速度过慢，请检查服务器网络线路，或者稍后再试。</span><br></pre></td></tr></table></figure>

<p>不允许百度去爬</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">对此github官方是这样说的 : 由于百度爬虫爬得太猛烈，已经对很多Github用户造成了可用性的问题了，而禁用百度爬虫这一举措可能会一直持续下去。</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Config</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Config</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Class</title>
    <url>/2021/01/02/Python-Class/</url>
    <content><![CDATA[<p>simple example: (within the same package)</p>
<p>Speaker.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Speaker</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sayHello</span>():</span></span><br><span class="line">        print(<span class="string">&#x27;hello&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>Test.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Speaker</span><br><span class="line">speaker = Speaker()</span><br><span class="line">speaker.sayHello()</span><br></pre></td></tr></table></figure>

<p>If in different package:</p>
<p>Test.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> packageName.Speaker <span class="keyword">import</span> Speaker</span><br><span class="line"></span><br><span class="line">speaker = Speaker()</span><br><span class="line">speaker.sayHello()</span><br></pre></td></tr></table></figure>



<p>You can also build a Constructor to initialize the object</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Speaker</span>:</span></span><br><span class="line">	name = <span class="literal">None</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name</span>):</span></span><br><span class="line">    	self.name = name</span><br><span class="line">	</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sayHello</span>():</span></span><br><span class="line">        print(<span class="string">&#x27;hello&#x27;</span>)</span><br></pre></td></tr></table></figure>

<hr>
<p>Generally, we use import like this</p>
<p>Lib.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span>():</span> <span class="comment"># this .py file do not have class, so do not need to instantiate</span></span><br><span class="line">    print(<span class="string">&#x27;hello&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>Test.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Lib</span><br><span class="line"></span><br><span class="line">Lib.hello() </span><br></pre></td></tr></table></figure>

<p>How can we import a class</p>
<p>A class Import other class and use that class’s function</p>
<p>Test.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> packageName.Speaker <span class="keyword">import</span> Speaker</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>:</span></span><br><span class="line">	speaker = Speaker() <span class="comment"># you need to instantiate the object, so that you can use it</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">testSpeak</span>():</span></span><br><span class="line">        speaker.sayHello()</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Python</category>
        <category>Tutorial</category>
      </categories>
      <tags>
        <tag>Tutorial</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Dict</title>
    <url>/2021/01/02/Python-Dict/</url>
    <content><![CDATA[<p>Traverse</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;b&#x27;</span>: <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;c&#x27;</span>: <span class="string">&#x27;3&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> key <span class="keyword">in</span> a:</span><br><span class="line">       print(key+<span class="string">&#x27;:&#x27;</span>+a[key])</span><br><span class="line"></span><br><span class="line">output:</span><br><span class="line">a:<span class="number">1</span></span><br><span class="line">b:<span class="number">2</span></span><br><span class="line">c:<span class="number">3</span></span><br></pre></td></tr></table></figure>

<p>Reverse</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="built_in">range</span>(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">reversed</span>(a):</span><br><span class="line">print(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4 3 2 1 0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>,<span class="number">-1</span>,<span class="number">-1</span>):</span><br><span class="line">print(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4 3 2 1 0</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
        <category>Tutorial</category>
      </categories>
      <tags>
        <tag>Tutorial</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python File Operation</title>
    <url>/2021/01/02/Python-File-Operation/</url>
    <content><![CDATA[<p>Add content to file</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">file = <span class="built_in">open</span>(<span class="string">&#x27;xxx.txt&#x27;</span>,<span class="string">&#x27;a&#x27;</span>) <span class="comment"># &#x27;a&#x27; mean append</span></span><br></pre></td></tr></table></figure>

<p>Read content</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">text = file.read() <span class="comment"># read the whole file</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Python</category>
        <category>Tutorial</category>
      </categories>
      <tags>
        <tag>Tutorial</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python JSON</title>
    <url>/2021/01/02/Python-JSON/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">file = <span class="built_in">open</span>(<span class="string">&quot;xxx.json&quot;</span>)</span><br><span class="line">jsonString = file.read()</span><br><span class="line">file.close()</span><br><span class="line">jsons=json.loads(jsonString)</span><br><span class="line"><span class="keyword">for</span> json <span class="keyword">in</span> jsons:</span><br><span class="line">	...</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
        <category>Tutorial</category>
      </categories>
      <tags>
        <tag>Tutorial</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Flask</title>
    <url>/2021/03/08/Python-Flask/</url>
    <content><![CDATA[<p>1.Listener </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>2.Template</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(&#x27;/&#x27;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span>():</span></span><br><span class="line">   <span class="keyword">return</span> <span class="string">&#x27;Hello World&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">   app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>)</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Python</category>
        <category>Flask</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Flask</tag>
      </tags>
  </entry>
  <entry>
    <title>Python List</title>
    <url>/2021/01/02/Python-List/</url>
    <content><![CDATA[<p>1.Don’t forget the comma</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">          [<span class="string">&#x27;j1&#x27;</span>,<span class="string">&#x27;m1&#x27;</span>,<span class="string">&#x27;x1&#x27;</span>,<span class="string">&#x27;s1&#x27;</span>,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;s2&#x27;</span>,<span class="string">&#x27;x2&#x27;</span>,<span class="string">&#x27;m2&#x27;</span>,<span class="string">&#x27;j2&#x27;</span>],</span><br><span class="line">          [<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>],</span><br><span class="line">          [<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;p1&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;p2&#x27;</span>,<span class="string">&#x27;&#x27;</span>],</span><br><span class="line">          [<span class="string">&#x27;b1&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;b2&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;b3&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;b4&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;b5&#x27;</span>],</span><br><span class="line">          [<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>],</span><br><span class="line">          [<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>],</span><br><span class="line">          [<span class="string">&#x27;B1&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;B2&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;B3&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;B4&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;B5&#x27;</span>],</span><br><span class="line">          [<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;P1&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;P2&#x27;</span>, <span class="string">&#x27;&#x27;</span>],</span><br><span class="line">          [<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>],</span><br><span class="line">          [<span class="string">&#x27;J1&#x27;</span>,<span class="string">&#x27;M1&#x27;</span>,<span class="string">&#x27;X1&#x27;</span>,<span class="string">&#x27;S1&#x27;</span>,<span class="string">&#x27;K&#x27;</span>,<span class="string">&#x27;S2&#x27;</span>,<span class="string">&#x27;X2&#x27;</span>,<span class="string">&#x27;M2&#x27;</span>,<span class="string">&#x27;J2&#x27;</span>]</span><br><span class="line">      ]</span><br></pre></td></tr></table></figure>

<hr>
<p>2.delete element</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">del</span>(a[<span class="number">2</span>]) <span class="comment"># arg is address</span></span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">output:</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>]</span><br></pre></td></tr></table></figure>

<hr>
<p>3.Deep copy</p>
<p>When you put a Object in a List</p>
<p>You actually store a address in List</p>
<p>So it’s easily to make a mistake</p>
<p>You think you put different object in the List</p>
<p>But actually, you just put an address in List for many time</p>
<p>And all address in a List point to the same memory</p>
<p>The solution is use deep copy</p>
<p>And new a Object every time, not just use setter or assign</p>
<p>Remember:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Setter will not create a new object</span><br><span class="line">Assignment will not create a new object </span><br><span class="line">(assignment just change the variable&#39;s address to the target)</span><br></pre></td></tr></table></figure>

<p>Wrong Example</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">nextState = State(self.player, self.agent)</span><br><span class="line">nextState.board = current_state.board </span><br><span class="line"><span class="comment"># will not create a new board, just point to the same memory</span></span><br></pre></td></tr></table></figure>

<p>Right Example</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line">nextState = State(self.player, self.agent) <span class="comment"># create a new object</span></span><br><span class="line">nextState.board = copy.deepcopy(current_state.board) </span><br><span class="line"><span class="comment"># create it&#x27;s own board instead of point to the same memory</span></span><br></pre></td></tr></table></figure>

<hr>
<ol start="4">
<li>  2 dimension array</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">matrix = []</span><br><span class="line"> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">      matrix.append([<span class="number">0</span>] * <span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<p>Or</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="number">3</span></span><br><span class="line">m = <span class="number">3</span></span><br><span class="line">dp = [[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m)]</span><br></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>Python</category>
        <category>Tutorial</category>
      </categories>
      <tags>
        <tag>Tutorial</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Log</title>
    <url>/2021/01/03/Python-Log/</url>
    <content><![CDATA[<p>Sometimes the error messages will be to long </p>
<p>Then the console is not big enough to display all messages</p>
<p>And we can’t see the root cause</p>
<p>The solution is output the error messages to a log file</p>
<p>Here is the example</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"> </span><br><span class="line">logging.basicConfig(filename=<span class="string">&#x27;log.log&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">error_func</span>():</span></span><br><span class="line">  b = <span class="number">1</span> / <span class="number">0</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">    error_func()</span><br><span class="line">  <span class="keyword">except</span>:</span><br><span class="line">    s = traceback.format_exc()</span><br><span class="line">    logging.error(s)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
        <category>Tutorial</category>
      </categories>
      <tags>
        <tag>Tutorial</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python String</title>
    <url>/2021/01/02/Python-String/</url>
    <content><![CDATA[<p>List to String</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">&#x27;&#x27;</span>.join(xxList))</span><br></pre></td></tr></table></figure>

<p>String to List</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span>=text.split(<span class="string">&#x27;,&#x27;</span>) <span class="comment"># split String by &#x27;,&#x27; to List</span></span><br><span class="line">    print(<span class="built_in">list</span>)</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Python</category>
        <category>Tutorial</category>
      </categories>
      <tags>
        <tag>Tutorial</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python module version</title>
    <url>/2021/01/02/Python-module-version/</url>
    <content><![CDATA[<p>Sometimes we will meet a situation:</p>
<p>The version of project’s modules are lower than what we current installed</p>
<p>Then shall we uninstall the current modules ?</p>
<p>That’s not a good idea</p>
<p>Actually, we can create a “Vitualenv” (Vitual Environment)</p>
<p>Pycharm help us easily deal with it</p>
<p>You can create a “Vitualenv “ in “Setting - Python Interpreter”</p>
<p>Add a “New Environment”</p>
<p>This Environment is totally pure </p>
<p>You can install the module as you want </p>
<p>And this  “Vitualenv” will not affect the modules you have installed</p>
<p>It’s a separate Python environment just use for the project</p>
<p>The new modules will be install in the project’s folder</p>
<p>And more convenient thing is </p>
<p>After you create a “Pure Environment”</p>
<p>You can let Pycharm install the modules the project needed ! ! !</p>
]]></content>
      <categories>
        <category>Config</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Tutorial</tag>
        <tag>Config</tag>
      </tags>
  </entry>
  <entry>
    <title>Qin App Conclusion</title>
    <url>/2021/01/04/Qin-App-Conclusion/</url>
    <content><![CDATA[<p>1.API document</p>
<p>Make a standard document of the request and response</p>
<p>So that the Client and Server side can be isolated</p>
<p>You can write your code as you like, but just follow the API document</p>
<hr>
<p>2.Modified API document</p>
<p>The first version of API document may not be so perfect</p>
<p>As the work beginning, we will found that the API document should be modified</p>
<p>But don’t worry, if you do enough job in the first version of API document</p>
<p>It’s not a big deal</p>
<hr>
<p>3.How to deal with API document</p>
<p>For my team, we first step is to work out a flow chart according to our requirement </p>
<p>With a basic flow chart, we can figure out the data we need</p>
<p>Then we talk about the data base structure</p>
<p>After these work, we can almost formulate the API</p>
<hr>
<p>4.Trouble with API document</p>
<p>Even though my team make a API document</p>
<p>But sometimes, my teammate still do not follow the document</p>
<p>Even though I make a comment there </p>
<p>But still miss that </p>
<p>Ah..</p>
<p>Then I meet with some strange bugs because of the wrong data I received</p>
<hr>
<p>5.Refactor and Lifecycle In Android</p>
<p>It’s a funny thing that the most of time I spend is not for implement the function</p>
<p>It’s for refactor</p>
<p>Oh..</p>
<p>Maybe my experience is not enough, not so familiar with Android and Kotlin</p>
<p>I wrote some repeat code for Student-side and Teacher-side</p>
<p>Actually, some repeat codes can be integrate into a util class</p>
<p>And that’s the problem, I spend a lot of time when I am doing integration</p>
<p>Almost every time I integrate the codes, the app will breakdown  </p>
<p>Because I am not familiar with the lifecycle of Android </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">The lifecycle is really important in Android</span><br></pre></td></tr></table></figure>

<p>My teacher say it a long time ago, but I miss it</p>
<p>Oh..</p>
<p>I didn’t pay much attention to lifecycle of Activity</p>
<p>That make a lot problems</p>
<p>And I use Fragment also, I still not familiar with the lifecycle with Fragment</p>
<p>They comes together ! ! </p>
<p>And that’s why I almost go crazy when I deal with the bugs</p>
<hr>
<p>6.Record</p>
<p>I got a good habit when working with this project</p>
<p>That is record ! </p>
<p>I record the bugs I meet, and put them in a file named “Bugs waiting to solve”</p>
<p>And after I fix it I will commit in git and record the solution of it in another file named “Bugs”</p>
<p>With these file I really feel I learn something from this project</p>
<hr>
<p>7.Github</p>
<p>This is the first time I use Github work with a team (actually there are just 2 people in my team haha)</p>
<p>Github is so cool ! ! </p>
<p>You can see every commits</p>
<p>You can see how many codes you have wrote</p>
<p>When merge the code, you can easily deal with the conflict</p>
<p>Perfect ! !</p>
<p>And ssh key is important</p>
<p>With ssh key you can push you code directly,</p>
<p>Don’t need to input the username and password again and again</p>
<hr>
<p>8.Git</p>
<p>With git, you don’t need to worry missing your code you just wrote</p>
<p>Every time after you fix a bug or implement a function commit it to git !</p>
<hr>
<p>9.Android Document</p>
<p>See official document ! !</p>
<p>Please ! ! </p>
<p>That’s the most correct way to solve the problem</p>
<p>The other important thing is “Use you brain”</p>
<p>Do not just follow the solutions other people provided</p>
<p>That solutions just give us advices</p>
<p>You need to learn from that</p>
<p>Not just follow that</p>
<p>And what’s more, pay you all attention to the Note!</p>
<p>Every “Note” in document is pretty important ! !</p>
<hr>
<p>10.How to use a new function</p>
<p>When you meet with unfamiliar function and don’t know how to use it </p>
<p>And you can’t find it’s document (not official module)</p>
<p>You can go to see it’s source code</p>
<p>Maybe you can got you answer there</p>
<p>Don’t be afraid of source code</p>
<p>Generally, the source code is clean code</p>
<p>And they are easily to read ~</p>
<hr>
]]></content>
      <categories>
        <category>Project Conclusion</category>
      </categories>
      <tags>
        <tag>Project Conclusion</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring MVC Tutorial</title>
    <url>/2021/01/07/Spring-MVC-Tutorial/</url>
    <content><![CDATA[<p>1.New a Empty Maven project</p>
<p>2.Add “Web” module</p>
<p>Go to “Project Structure” – “Modules”</p>
<p>3.Config dependencies</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<p>4.New “ApplicationContext.xml” in classpath</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;xxx&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Description</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">annotation-driven --  Spring MVC Controller programming model</span><br><span class="line">default-servlet-handler -- Configures a handler for serving static resources</span><br></pre></td></tr></table></figure>

<hr>
<p>5.Config “web.xml”</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:ApplicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<p>6.Build Artifact</p>
<p>Go to “Project Structure”</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Web Application exploded</span><br></pre></td></tr></table></figure>

<p>Introduction</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">The dependencies will be put in a folder named &quot;lib&quot; in &quot;WEB-INF&quot;</span><br></pre></td></tr></table></figure>

<hr>
<p>7.Configure Tomcat</p>
<p>Go to “Deployment” </p>
<p>Put war in it</p>
<p>Then change the “Application context” to “/“</p>
<p>So that you can access your application directly </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost:8080</span><br></pre></td></tr></table></figure>

<hr>
<p>END</p>
]]></content>
      <categories>
        <category>SpringMVC</category>
        <category>Tutorial</category>
      </categories>
      <tags>
        <tag>Tutorial</tag>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>Refactor Notes</title>
    <url>/2021/01/03/Refactor-Notes/</url>
    <content><![CDATA[<p>1.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Code will be more clear if you use keyword &quot;else if&quot;</span><br></pre></td></tr></table></figure>

<p>2.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Use more of constant</span><br><span class="line"></span><br><span class="line">example:(Kotlin)</span><br><span class="line"></span><br><span class="line">const val FAIL &#x3D; 0</span><br><span class="line">if(state &#x3D;&#x3D; FAIL)&#123;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Code will be much more clear</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Refactor</category>
        <category>Notes</category>
      </categories>
      <tags>
        <tag>Refactor</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring1重构</title>
    <url>/2020/11/05/Spring1%E9%87%8D%E6%9E%84/</url>
    <content><![CDATA[<p>​    1.javax 是由Tomcat提供的</p>
<p>2.Context 养成好习惯，用完记得close()</p>
<p>3.“一次性”的变量能省就省</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">	WebApplicationContext context=WebApplicationContextUtils.getWebApplicationContext(request.getServletContext());</span><br><span class="line">	context.getBean(<span class="string">&quot;helloImpl&quot;</span>,Hello.class).sayHello();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>4.Spring DI Bean之间是由依赖关系的，被引用的那个Bean应该先被创建</p>
<p>XML的构建是按从上到下顺序的</p>
<p>5.Static Factory 方法获取Bean</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bean1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.dgut.factory.StaticFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;createBean&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- you can set properties here  --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- you can also set constructor-arg here  --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dgut.factory;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticFactory</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MyBean <span class="title">createBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> MyBean(<span class="string">&quot;Alice&quot;</span>,<span class="number">15</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testStaticFactory</span><span class="params">()</span> </span>&#123;<span class="comment">//static </span></span><br><span class="line">	ConfigurableApplicationContext context =<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;StaticFactory.xml&quot;</span>);</span><br><span class="line">	System.out.print(context.getBean(<span class="string">&quot;bean1&quot;</span>,MyBean.class));</span><br><span class="line">	context.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>只要beans.xsd</p>
<p>7.BeanFactory 方法获取Bean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dgut.factory;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryBean</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> MyBean <span class="title">createBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> MyBean();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- factory instance to get bean --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;BeanFactory1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.dgut.factory.FactoryBean&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bean1&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;BeanFactory1&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;createBean&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>只要beans.xsd</p>
<p>8.由方法返回的像context这样的对象是会自动close()的</p>
<p>也就是说，可立即使用，但不能二次使用</p>
<p>9.在XML中的properties—对应的是getter和setter</p>
<p>构造函数另有constructor-arg</p>
<p>但特殊情况下，properties可以代替constructor-arg，不写constructor-arg</p>
<p>原因是缺省constructor-arg时调用不含参的构造函数</p>
<p>10.当prototype和singleton都指向同一个类时</p>
<p>prototype 就没有意义了</p>
<p>11.singleton的意义是在容启启动之初检查Bean是否有问题，很有必要</p>
<p>所有，Bean 的默认加载方式是singleton</p>
<p>12.XML中的autowire</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;Jim&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.dgut.autowire.Person&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Jim&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;address&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.dgut.autowire.Address&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;city&quot;</span> <span class="attr">value</span>=<span class="string">&quot;meizhou&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dgut.autowire;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	Address address;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, Address address)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>();</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">		<span class="keyword">this</span>.address = address;</span><br><span class="line">	&#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">----------------------------------------------------------</span><br><span class="line"><span class="keyword">package</span> com.dgut.autowire;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</span><br><span class="line">	String city;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Address</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Address</span><span class="params">(String city)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>();</span><br><span class="line">		<span class="keyword">this</span>.city = city;</span><br><span class="line">	&#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>byName对应Field(也可以说property)名</p>
<p>byType </p>
<blockquote>
<p>“byType” Autowiring if there is exactly one bean of the property type in the container. If there is<br>more than one, a fatal error is raised, and you cannot use byType autowiring for that bean. </p>
</blockquote>
<hr>
<p>第一次重构就到这里啦</p>
<p>重构追求精简，清晰，但难免也会又进死胡同</p>
<p>重构完一个地方就要进行单元测试，不然到时候全部写完测出错误很麻烦</p>
<p>这次只展示了重构后的代码</p>
<p>重构前的代码。。忘记存了，下次重构不会漏了</p>
]]></content>
      <categories>
        <category>Java</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring注解是怎么工作的</title>
    <url>/2020/11/05/Spring%E6%B3%A8%E8%A7%A3%E6%98%AF%E6%80%8E%E4%B9%88%E5%B7%A5%E4%BD%9C%E7%9A%84/</url>
    <content><![CDATA[<p>版本说明：Spring 5.2.9 </p>
<p>本文侧重于源码的解读</p>
<p>这里以@Autowired为例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AutowiredAnnotationBeanPostProcessor</span></span></span><br><span class="line"><span class="class"><span class="keyword">extends</span> <span class="title">Object</span></span></span><br><span class="line"><span class="class"><span class="keyword">implements</span> <span class="title">SmartInstantiationAwareBeanPostProcessor</span>, <span class="title">MergedBeanDefinitionPostProcessor</span>, <span class="title">PriorityOrdered</span>, <span class="title">BeanFactoryAware</span></span></span><br></pre></td></tr></table></figure>

<p><a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/beans/factory/config/BeanPostProcessor.html"><code>BeanPostProcessor</code></a> implementation that autowires annotated fields, setter methods, and arbitrary config methods. Such members to be injected are detected through annotations: by default, Spring’s <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/beans/factory/annotation/Autowired.html"><code>@Autowired</code></a> and <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/beans/factory/annotation/Value.html"><code>@Value</code></a> annotations.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processInjection</span><span class="params">(Object bean)</span> <span class="keyword">throws</span> BeanCreationException </span>&#123;</span><br><span class="line">		Class&lt;?&gt; clazz = bean.getClass();</span><br><span class="line">		InjectionMetadata metadata = findAutowiringMetadata(clazz.getName(), clazz, <span class="keyword">null</span>);</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			metadata.inject(bean, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (BeanCreationException ex) &#123;</span><br><span class="line">			<span class="keyword">throw</span> ex;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</span><br><span class="line">					<span class="string">&quot;Injection of autowired dependencies failed for class [&quot;</span> + clazz + <span class="string">&quot;]&quot;</span>, ex);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>



<p>获取AutowiringMetadata后，做inject</p>
<p>其中的AutowiringMetadata，简单的说就是@Autowired</p>
<blockquote>
<p>an <strong>annotation</strong> is a form of syntactic <a href="https://en.wikipedia.org/wiki/Metadata">metadata</a> that can be added to Java <a href="https://en.wikipedia.org/wiki/Source_code">source code</a>.</p>
</blockquote>
<p>这是维基百科上的解释</p>
<p>那Spring又是怎么确定是否存在@Autowired的呢</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> MergedAnnotation&lt;?&gt; findAutowiredAnnotation(AccessibleObject ao) &#123;</span><br><span class="line">	MergedAnnotations annotations = MergedAnnotations.from(ao);</span><br><span class="line">	<span class="keyword">for</span> (Class&lt;? extends Annotation&gt; type : <span class="keyword">this</span>.autowiredAnnotationTypes) &#123;</span><br><span class="line">		MergedAnnotation&lt;?&gt; annotation = annotations.get(type);</span><br><span class="line">		<span class="keyword">if</span> (annotation.isPresent()) &#123;</span><br><span class="line">			<span class="keyword">return</span> annotation;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Set&lt;Class&lt;? extends Annotation&gt;&gt; autowiredAnnotationTypes = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.autowiredAnnotationTypes</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AutowiredAnnotationBeanPostProcessor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.autowiredAnnotationTypes.add(Autowired.class);</span><br><span class="line">		<span class="keyword">this</span>.autowiredAnnotationTypes.add(Value.class);</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="keyword">this</span>.autowiredAnnotationTypes.add((Class&lt;? extends Annotation&gt;)</span><br><span class="line">					ClassUtils.forName(<span class="string">&quot;javax.inject.Inject&quot;</span>, AutowiredAnnotationBeanPostProcessor.class.getClassLoader()));</span><br><span class="line">			logger.trace(<span class="string">&quot;JSR-330 &#x27;javax.inject.Inject&#x27; annotation found and supported for autowiring&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line">			<span class="comment">// JSR-330 API not available - simply skip.</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>



<p>已经很清晰了，存放了Autowired.class</p>
<p>则回到findAutowiredAnnotation()中，如果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">MergedAnnotations annotations = MergedAnnotations.from(ao);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MergedAnnotations</span></span></span><br><span class="line"><span class="class"><span class="keyword">extends</span> <span class="title">Iterable</span>&lt;<span class="title">MergedAnnotation</span>&lt;<span class="title">Annotation</span>&gt;&gt;</span></span><br></pre></td></tr></table></figure>

<p>Provides access to a collection of merged annotations, usually obtained from a source such as a <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html?is-external=true"><code>Class</code></a> or <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Method.html?is-external=true"><code>Method</code></a>.</p>
<p>获取这个Bean 的Annotations</p>
<p>然后看其中是否存在Autowired</p>
<p>那么确定是否有Autowired的问题解决了，之后就是inject了</p>
<hr>
<p>首先来看看调用inject()的InjectionMetadata</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InjectionMetadata</span></span></span><br><span class="line"><span class="class"><span class="keyword">extends</span> <span class="title">Object</span></span></span><br></pre></td></tr></table></figure>

<p>Internal class for managing injection metadata. Not intended for direct use in applications.</p>
<p>对的，这个就是依赖注入里的inject</p>
<p>不过，我暂时没有想法去了解，有兴趣的同学可以继续往下了解</p>
<hr>
<p><a href="http://www.avajava.com/tutorials/lessons/how-do-i-list-the-declared-fields-of-a-class.html">Field</a></p>
]]></content>
      <categories>
        <category>Java</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Tensorflow Error Messages</title>
    <url>/2021/01/03/Tensorflow-Error-Messages/</url>
    <content><![CDATA[<p>1.</p>
<p>Error</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ValueError: (&#39;Error when checking model target: expected no data, but got:&#39;, array([&#39;6947&#39;, &#39;7232&#39;, &#39;7967&#39;, ..., &#39;5646&#39;, &#39;3554&#39;, &#39;4656&#39;], dtype&#x3D;&#39;&lt;U4&#39;))</span><br></pre></td></tr></table></figure>

<p>Reason</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">When using model.fit() the training data is not matching to the label array</span><br><span class="line">In other words, the length of training data array should be the same as label array</span><br></pre></td></tr></table></figure>



<p>2.</p>
<p>Error</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ValueError: Please provide as model inputs either a single array or a list of arrays.</span><br></pre></td></tr></table></figure>

<p>Solution</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">training_data&#x3D;np.array(training_ataset)</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Machine Learn</category>
        <category>Tensorflow</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Machine Learn</tag>
      </tags>
  </entry>
  <entry>
    <title>VS Error</title>
    <url>/2021/03/08/VS-Error/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Warning: The following VS instances are excluded because the English language pack is unavailable.</span><br></pre></td></tr></table></figure>

<p>Solve </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">I have re-installed vs2017 with English language pack to solve this problem.</span><br></pre></td></tr></table></figure>

<p><img src="./image-20201115190024960.png" alt="img1"></p>
]]></content>
  </entry>
  <entry>
    <title>Typora Shortcut</title>
    <url>/2021/03/08/Typora-Shortcut/</url>
    <content><![CDATA[<p>编辑</p>
<table>
<thead>
<tr>
<th><a href="https://defkey.com/what-means/ctrl-h">Ctrl + H</a></th>
<th>Replace</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://defkey.com/what-means/ctrl-d">Ctrl + D</a></td>
<td>Select Word</td>
</tr>
<tr>
<td><a href="https://defkey.com/what-means/ctrl-l">Ctrl + L</a></td>
<td>Select Line/Sentence</td>
</tr>
<tr>
<td><a href="https://defkey.com/what-means/ctrl-home">Ctrl + Home</a></td>
<td>Jump to Top</td>
</tr>
<tr>
<td><a href="https://defkey.com/what-means/ctrl-end">Ctrl + End</a></td>
<td>Jump to Bottom</td>
</tr>
<tr>
<td><a href="https://defkey.com/what-means/f3">F3</a></td>
<td>Find Next</td>
</tr>
<tr>
<td><a href="https://defkey.com/what-means/shift-f3">↑  Shift + F3</a></td>
<td>Find Previous</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>段落</p>
<table>
<thead>
<tr>
<th><a href="https://defkey.com/what-means/ctrl-1">Ctrl + 1</a>~6</th>
<th>set Heading 1</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://defkey.com/what-means/ctrl-t">Ctrl + T</a></td>
<td>Table</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>格式</p>
<table>
<thead>
<tr>
<th>[Ctrl + ↑  Shift + <code>](https://defkey.com/what-means/ctrl-shift-</code>)</th>
<th>Code</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://defkey.com/what-means/ctrl-k">Ctrl + K</a></td>
<td>Hyperlink</td>
</tr>
<tr>
<td>``</td>
<td>代码</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>视图</p>
<table>
<thead>
<tr>
<th><a href="https://defkey.com/what-means/ctrl-shift-minus">Ctrl + ↑  Shift + -</a></th>
<th>缩放</th>
</tr>
</thead>
<tbody><tr>
<td>Ctrl+shift+l</td>
<td>侧边栏</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Shortcut</category>
      </categories>
      <tags>
        <tag>Shortcut</tag>
        <tag>Typora</tag>
      </tags>
  </entry>
  <entry>
    <title>cmd Shortcut</title>
    <url>/2021/03/08/cmd-Shortcut/</url>
    <content><![CDATA[<p>1.源文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\Background\shell\OpenCMDHere]</span><br><span class="line">&quot;ShowBasedOnVelocityId&quot;&#x3D;dword:00639bc8</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\Background\shell\OpenCMDHere\command]</span><br><span class="line">@&#x3D;&quot;cmd.exe &#x2F;s &#x2F;k pushd \&quot;%V\&quot;&quot;</span><br></pre></td></tr></table></figure>

<p>2.想要Windows Terminal </p>
<p>把其快捷方式放到System32下（即和cmd.exe一起）</p>
<p>然后</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\Background\shell\OpenCMDHere]</span><br><span class="line">&quot;ShowBasedOnVelocityId&quot;&#x3D;dword:00639bc8</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\Background\shell\OpenCMDHere\command]</span><br><span class="line">@&#x3D;&quot;wt.exe cmd.exe &#x2F;s &#x2F;k pushd \&quot;%V\&quot;&quot;</span><br></pre></td></tr></table></figure>

<p>pushd 相当于cd</p>
<p>你也可以在cmd下输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cmd pushd g:</span><br></pre></td></tr></table></figure>

<p>相当于</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd g:</span><br></pre></td></tr></table></figure>

<p>具体原理我不是很想研究。。</p>
<p>会用就好了 这玩意儿</p>
<p>3.进入注册表</p>
<p>win+r</p>
<p>regedit </p>
<p>你可以根据源代码找到注册表的对应位置</p>
<p>4.这里是微软介绍reg的<a href="https://support.microsoft.com/en-us/help/310516/how-to-add-modify-or-delete-registry-subkeys-and-values-by-using-a-reg">文档</a></p>
<p>虽然我看不太懂</p>
<p>简单地说了最上面的version不是简单的注释</p>
<p>而是对应了不同的windows版本</p>
<p>然后下面的是具体的值的设置</p>
<p>你也可以一GUI的形式到regedit下修改</p>
]]></content>
      <categories>
        <category>Shortcut</category>
      </categories>
      <tags>
        <tag>Shortcut</tag>
      </tags>
  </entry>
  <entry>
    <title>WSL conflict</title>
    <url>/2021/03/08/WSL-conflict/</url>
    <content><![CDATA[<p>“cmd” with “administrator”</p>
<p>(Some simulator(e.g. Android simulator ) need to close hp-v virtual machine in win10)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bcdedit &#x2F;set hypervisorlaunchtype off</span><br></pre></td></tr></table></figure>

<p>open WSL(WSL base on hp-v virtual machine in win10)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bcdedit &#x2F;set hypervisorlaunchtype auto</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
</search>
